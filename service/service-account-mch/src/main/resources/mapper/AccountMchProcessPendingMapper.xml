<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.xpay.facade.accountmch.entity.AccountMchProcessPending">
	<sql id="table"> tbl_account_mch_process_pending </sql>

	<!-- 用于返回的bean对象 -->
	<resultMap id="BaseResultMap" type="com.xpay.facade.accountmch.entity.AccountMchProcessPending">
		<result column="ID" property="id" jdbcType="BIGINT"/>
		<result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="VERSION" property="version" jdbcType="TINYINT"/>
		<result column="MODIFY_TIME" property="modifyTime" jdbcType="TIMESTAMP"/>
		<result column="ACCOUNT_PROCESS_NO" property="accountProcessNo" jdbcType="VARCHAR"/>
		<result column="PROCESS_STAGE" property="processStage" jdbcType="TINYINT"/>
		<result column="DATA_UNQ_KEY" property="dataUnqKey" jdbcType="CHAR"/>
		<result column="REQUEST_DTO" property="requestDto" jdbcType="OTHER"/>
		<result column="PROCESS_DTO_LIST" property="processDtoList" jdbcType="OTHER"/>
		<result column="REMARK" property="remark" jdbcType="VARCHAR"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Base_Column_List">
		ID,
		CREATE_TIME,
		VERSION,
		MODIFY_TIME,
		ACCOUNT_PROCESS_NO,
		PROCESS_STAGE,
		DATA_UNQ_KEY,
		REQUEST_DTO,
		PROCESS_DTO_LIST,
		REMARK
	</sql>

	<!-- 插入记录 -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.xpay.facade.accountmch.entity.AccountMchProcessPending">
		INSERT INTO <include refid="table" /> (
        	CREATE_TIME,
        	VERSION,
        	MODIFY_TIME,
        	ACCOUNT_PROCESS_NO,
        	PROCESS_STAGE,
        	DATA_UNQ_KEY,
        	REQUEST_DTO,
        	PROCESS_DTO_LIST,
        	REMARK
        ) VALUES (
			#{createTime,jdbcType=TIMESTAMP},
			0,
			#{modifyTime,jdbcType=TIMESTAMP},
			#{accountProcessNo,jdbcType=VARCHAR},
			#{processStage,jdbcType=TINYINT},
			#{dataUnqKey,jdbcType=CHAR},
			#{requestDto,jdbcType=OTHER},
			#{processDtoList,jdbcType=OTHER},
			#{remark,jdbcType=VARCHAR}
        )
	</insert>

	<!-- 批量插入记录 -->
	<insert id="batchInsert" useGeneratedKeys="true" keyProperty="id" parameterType="list">
		INSERT INTO <include refid="table" /> (
        	CREATE_TIME,
        	VERSION,
        	MODIFY_TIME,
        	ACCOUNT_PROCESS_NO,
        	PROCESS_STAGE,
        	DATA_UNQ_KEY,
        	REQUEST_DTO,
        	PROCESS_DTO_LIST,
        	REMARK
        ) VALUES 
			<foreach collection="list" item="item" separator=",">
			(
			#{item.createTime,jdbcType=TIMESTAMP},
			0,
			#{item.modifyTime,jdbcType=TIMESTAMP},
			#{item.accountProcessNo,jdbcType=VARCHAR},
			#{item.processStage,jdbcType=TINYINT},
			#{item.dataUnqKey,jdbcType=CHAR},
			#{item.requestDto,jdbcType=OTHER},
			#{item.processDtoList,jdbcType=OTHER},
			#{item.remark,jdbcType=VARCHAR}
			)
			</foreach>
	</insert>

	<!-- 更新 -->
	<update id="update" parameterType="com.xpay.facade.accountmch.entity.AccountMchProcessPending">
        UPDATE <include refid="table" />
		<set>
			VERSION = #{version,jdbcType=TINYINT} + 1,
			MODIFY_TIME = #{modifyTime,jdbcType=TIMESTAMP},
			ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=VARCHAR},
			PROCESS_STAGE = #{processStage,jdbcType=TINYINT},
			DATA_UNQ_KEY = #{dataUnqKey,jdbcType=CHAR},
			REQUEST_DTO = #{requestDto,jdbcType=OTHER},
			PROCESS_DTO_LIST = #{processDtoList,jdbcType=OTHER},
			REMARK = #{remark,jdbcType=VARCHAR}
		</set>
        WHERE ID = #{id,jdbcType=BIGINT} and VERSION = #{version,jdbcType=TINYINT}
	</update>

	<!-- 只更新不为null的属性 -->
	<update id="updateIfNotNull" parameterType="com.xpay.facade.accountmch.entity.AccountMchProcessPending">
		UPDATE <include refid="table" />
		<set>
			VERSION = #{version,jdbcType=TINYINT} + 1,
			<if test="modifyTime != null">
				MODIFY_TIME = #{modifyTime,jdbcType=TIMESTAMP},
			</if>
			<if test="accountProcessNo != null">
				ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=VARCHAR},
			</if>
			<if test="processStage != null">
				PROCESS_STAGE = #{processStage,jdbcType=TINYINT},
			</if>
			<if test="dataUnqKey != null">
				DATA_UNQ_KEY = #{dataUnqKey,jdbcType=CHAR},
			</if>
			<if test="requestDto != null">
				REQUEST_DTO = #{requestDto,jdbcType=OTHER},
			</if>
			<if test="processDtoList != null">
				PROCESS_DTO_LIST = #{processDtoList,jdbcType=OTHER},
			</if>
			<if test="remark != null">
				REMARK = #{remark,jdbcType=VARCHAR}
			</if>
		</set>
		WHERE ID = #{id,jdbcType=BIGINT} and VERSION = #{version,jdbcType=TINYINT}
	</update>
	
	<!-- 多条件组合查询 -->
	<select id="listBy" parameterType="java.util.Map" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM
		<include refid="table" />
		<where>
			<include refid="condition_sql" />
		</where>
		<choose>
			<when test="sortColumns != null and sortColumns !='' ">
				<![CDATA[ ORDER BY ${sortColumns} ]]>
			</when>
			<otherwise>
				<![CDATA[ ORDER BY ID DESC ]]>
			</otherwise>
		</choose>
	</select>
	
	<!-- 根据多条件组合查询，计算总记录数 -->
	<select id="countBy" parameterType="java.util.Map" resultType="long">
		SELECT count(ID) FROM
		<include refid="table" />
		<where>
			<include refid="condition_sql" />
		</where>
	</select>

	<!-- 按查询条件删除 -->
	<delete id="deleteBy">
        DELETE FROM <include refid="table" /> 
		<where>
			<include refid="condition_sql" />
		</where>
    </delete>

	<!-- 根据多个id查询 -->
    <select id="listByIdList" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" />
		FROM <include refid="table" />
		WHERE ID IN 
		<foreach collection="list" item="item" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
	</select>

	<!-- 根据id查询 -->
    <select id="getById" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" />
		FROM <include refid="table" /> 
		WHERE ID = #{id,jdbcType=BIGINT}  
	</select>

	<!-- 按id主键删除 -->
	<delete id="deleteById">
        DELETE FROM <include refid="table" /> WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

	<!-- 按多个id主键删除 -->
	<delete id="deleteByIdList" parameterType="list">
		DELETE FROM <include refid="table" />
		WHERE ID IN 
		<foreach collection="list" item="item" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
	</delete>

	<!-- ↑↑↑↑↑↑ 如果有新增字段、删除字段、修改字段 以上内容可用模板生成新内容后直接替换 ↑↑↑↑↑↑ -->
	<!-- ↓↓↓↓↓↓ 以下内容是根据需求手动添加或修改的，请勿使用模板内容直接覆盖 ↓↓↓↓↓↓ -->

	<sql id="condition_sql">
		<if test="id != null ">
			AND ID = #{id,jdbcType=BIGINT}
		</if>
		<if test="idList != null and idList.size() > 0">
			AND ID IN <foreach collection="idList" item="item" index="index" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
		</if>
		<if test="createTime != null ">
			AND CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="createTimeBegin != null">
			AND CREATE_TIME >= #{createTimeBegin,jdbcType=TIMESTAMP}
		</if>
		<if test="createTimeEnd != null ">
			AND CREATE_TIME <![CDATA[<=]]> #{createTimeEnd,jdbcType=TIMESTAMP}
		</if>
		<if test="version != null ">
			AND VERSION = #{version,jdbcType=TINYINT}
		</if>
		<if test="modifyTime != null ">
			AND MODIFY_TIME = #{modifyTime,jdbcType=TIMESTAMP}
		</if>
		<if test="accountProcessNo != null and accountProcessNo !='' ">
			AND ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=VARCHAR}
		</if>
		<if test="processStage != null ">
			AND PROCESS_STAGE = #{processStage,jdbcType=TINYINT}
		</if>
		<if test="dataUnqKey != null and dataUnqKey !='' ">
			AND DATA_UNQ_KEY = #{dataUnqKey,jdbcType=CHAR}
		</if>
		<if test="requestDto != null ">
			AND REQUEST_DTO = #{requestDto,jdbcType=OTHER}
		</if>
		<if test="processDtoList != null ">
			AND PROCESS_DTO_LIST = #{processDtoList,jdbcType=OTHER}
		</if>
		<if test="remark != null and remark !='' ">
			AND REMARK = #{remark,jdbcType=VARCHAR}
		</if>
	</sql>

	<!-- 查询待处理的 -->
	<select id="listPendingAccountProcessId" parameterType="java.util.Map" resultType="long">
		SELECT ID FROM
		<include refid="table"/>
		<where>
			CREATE_TIME >= #{createTimeBegin,jdbcType=TIMESTAMP}
			CREATE_TIME <![CDATA[<=]]> #{createTimeEnd,jdbcType=TIMESTAMP}
			<if test="minId!=null">and id>=#{minId,jdbcType=BIGINT}</if>
			and PROCESS_STAGE = #{processStage,jdbcType=TINYINT} ORDER BY ID ASC LIMIT 0, #{number,jdbcType=INTEGER}
		</where>
	</select>


	<update id="updatePendingStatus" parameterType="map">
		UPDATE
		<include refid="table"/>
		set PROCESS_STAGE = #{stageNew,jdbcType=TINYINT}
		where ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=CHAR} and PROCESS_STAGE = #{stageOld,jdbcType=TINYINT}
	</update>

	<!--    数据迁移相关-->
	<select id="getMigrationMaxId" parameterType="java.util.Map" resultType="long">
		select IFNULL(
		IFNULL((select MAX(id) from
		<include refid="table"/>
		WHERE CREATE_TIME BETWEEN #{createTimeBegin,jdbcType=TIMESTAMP} AND #{createTimeEnd,jdbcType=TIMESTAMP}),
		(select id from
		<include refid="table"/>
		where CREATE_TIME > #{createTimeEnd,jdbcType=TIMESTAMP} order by id limit 1)),
		(select max(id) from
		<include refid="table"/>
		where CREATE_TIME <![CDATA[<=]]> #{createTimeEnd,jdbcType=TIMESTAMP})
		) as maxId
	</select>


	<select id="listIdsForMigration" parameterType="java.util.Map" resultType="long">
		SELECT ID from
		<include refid="table"/>
		WHERE CREATE_TIME <![CDATA[ <= ]]> #{migrateEndDate,jdbcType=TIMESTAMP}
		AND ID <![CDATA[ <= ]]> #{maxId,jdbcType=BIGINT}
		AND PROCESS_STAGE = #{processStage,jdbcType=SMALLINT}
		order by ID asc
		limit #{migrateNumPerTime,jdbcType=BIGINT}
	</select>

	<insert id="migratePendingByIds" parameterType="map">
		INSERT INTO tbl_account_mch_process_pending_history (
		ID,CREATE_TIME,VERSION,MODIFY_TIME,ACCOUNT_PROCESS_NO,PROCESS_STAGE,DATA_UNQ_KEY,REQUEST_DTO,PROCESS_DTO_LIST,REMARK,MIGRATE_TIME)
		SELECT
		ID,CREATE_TIME,VERSION,MODIFY_TIME,ACCOUNT_PROCESS_NO,PROCESS_STAGE,DATA_UNQ_KEY,REQUEST_DTO,PROCESS_DTO_LIST,REMARK,now()
		FROM
		<include refid="table"/>
		WHERE ID IN
		<foreach collection="idList" item="item" index="index" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
	</insert>

	<delete id="deletePendingByIds" parameterType="map">
		delete from
		<include refid="table"/>
		where ID in
		<foreach collection="idList" item="item" index="index" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
	</delete>
	<!--    数据迁移相关-->
</mapper>

