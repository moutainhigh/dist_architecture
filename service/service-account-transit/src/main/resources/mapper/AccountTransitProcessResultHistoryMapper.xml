<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.xpay.facade.accounttransit.entity.AccountTransitProcessResultHistory">
    <sql id="table"> tbl_account_transit_process_result_history </sql>

    <!-- 用于返回的bean对象 -->
    <resultMap id="BaseResultMap" type="com.xpay.facade.accounttransit.entity.AccountTransitProcessResultHistory">
        <result column="ID" property="id" jdbcType="BIGINT"/>
        <result column="VERSION" property="version" jdbcType="SMALLINT"/>
        <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="ACCOUNT_PROCESS_NO" property="accountProcessNo" jdbcType="VARCHAR"/>
        <result column="PROCESS_RESULT" property="processResult" jdbcType="SMALLINT"/>
        <result column="ERROR_CODE" property="errorCode" jdbcType="INTEGER"/>
        <result column="AUDIT_STAGE" property="auditStage" jdbcType="TINYINT"/>
        <result column="CALLBACK_STAGE" property="callbackStage" jdbcType="TINYINT"/>
        <result column="REMARK" property="remark" jdbcType="VARCHAR"/>
        <result column="IS_FROM_ASYNC" property="isFromAsync" jdbcType="TINYINT"/>
        <result column="REQUEST_DTO" property="requestDto" jdbcType="OTHER"/>
        <result column="PROCESS_DTO_LIST" property="processDtoList" jdbcType="OTHER"/>
        <result column="MIGRATE_TIME" property="migrateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="Base_Column_List">
        ID,
		VERSION,
		CREATE_TIME,
		ACCOUNT_PROCESS_NO,
		PROCESS_RESULT,
		ERROR_CODE,
		AUDIT_STAGE,
		CALLBACK_STAGE,
		REMARK,
		IS_FROM_ASYNC,
		REQUEST_DTO,
		PROCESS_DTO_LIST,
		MIGRATE_TIME
    </sql>

    <!-- 插入记录 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.xpay.facade.accounttransit.entity.AccountTransitProcessResultHistory">
        INSERT INTO
        <include refid="table"/>
        (
        VERSION,
        ACCOUNT_PROCESS_NO,
        PROCESS_RESULT,
        ERROR_CODE,
        AUDIT_STAGE,
        CALLBACK_STAGE,
        REMARK,
        IS_FROM_ASYNC,
        REQUEST_DTO,
        PROCESS_DTO_LIST,
        MIGRATE_TIME
        ) VALUES (
        0,
        #{accountProcessNo,jdbcType=VARCHAR},
        #{processResult,jdbcType=SMALLINT},
        #{errorCode,jdbcType=INTEGER},
        #{auditStage,jdbcType=TINYINT},
        #{callbackStage,jdbcType=TINYINT},
        #{remark,jdbcType=VARCHAR},
        #{isFromAsync,jdbcType=TINYINT},
        #{requestDto,jdbcType=OTHER},
        #{processDtoList,jdbcType=OTHER},
        #{migrateTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <!-- 批量插入记录 -->
    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id" parameterType="list">
        INSERT INTO
        <include refid="table"/>
        (
        VERSION,
        ACCOUNT_PROCESS_NO,
        PROCESS_RESULT,
        ERROR_CODE,
        AUDIT_STAGE,
        CALLBACK_STAGE,
        REMARK,
        IS_FROM_ASYNC,
        REQUEST_DTO,
        PROCESS_DTO_LIST,
        MIGRATE_TIME
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            0,
            #{item.accountProcessNo,jdbcType=VARCHAR},
            #{item.processResult,jdbcType=SMALLINT},
            #{item.errorCode,jdbcType=INTEGER},
            #{item.auditStage,jdbcType=TINYINT},
            #{item.callbackStage,jdbcType=TINYINT},
            #{item.remark,jdbcType=VARCHAR},
            #{item.isFromAsync,jdbcType=TINYINT},
            #{item.requestDto,jdbcType=OTHER},
            #{item.processDtoList,jdbcType=OTHER},
            #{item.migrateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!-- 更新 -->
    <update id="update" parameterType="com.xpay.facade.accounttransit.entity.AccountTransitProcessResultHistory">
        UPDATE
        <include refid="table"/>
        <set>
            VERSION = #{version,jdbcType=SMALLINT} + 1,
            ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=VARCHAR},
            PROCESS_RESULT = #{processResult,jdbcType=SMALLINT},
            ERROR_CODE = #{errorCode,jdbcType=INTEGER},
            AUDIT_STAGE = #{auditStage,jdbcType=TINYINT},
            CALLBACK_STAGE = #{callbackStage,jdbcType=TINYINT},
            REMARK = #{remark,jdbcType=VARCHAR},
            IS_FROM_ASYNC = #{isFromAsync,jdbcType=TINYINT},
            REQUEST_DTO = #{requestDto,jdbcType=OTHER},
            PROCESS_DTO_LIST = #{processDtoList,jdbcType=OTHER},
            MIGRATE_TIME = #{migrateTime,jdbcType=TIMESTAMP}
        </set>
        WHERE ID = #{id,jdbcType=BIGINT} and VERSION = #{version,jdbcType=SMALLINT}
    </update>

    <!-- 只更新不为null的属性 -->
    <update id="updateIfNotNull" parameterType="com.xpay.facade.accounttransit.entity.AccountTransitProcessResultHistory">
        UPDATE
        <include refid="table"/>
        <set>
            VERSION = #{version,jdbcType=SMALLINT} + 1,
            <if test="accountProcessNo != null">
                ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=VARCHAR},
            </if>
            <if test="processResult != null">
                PROCESS_RESULT = #{processResult,jdbcType=SMALLINT},
            </if>
            <if test="errorCode != null">
                ERROR_CODE = #{errorCode,jdbcType=INTEGER},
            </if>
            <if test="auditStage != null">
                AUDIT_STAGE = #{auditStage,jdbcType=TINYINT},
            </if>
            <if test="callbackStage != null">
                CALLBACK_STAGE = #{callbackStage,jdbcType=TINYINT},
            </if>
            <if test="remark != null">
                REMARK = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="isFromAsync != null">
                IS_FROM_ASYNC = #{isFromAsync,jdbcType=TINYINT},
            </if>
            <if test="requestDto != null">
                REQUEST_DTO = #{requestDto,jdbcType=OTHER},
            </if>
            <if test="processDtoList != null">
                PROCESS_DTO_LIST = #{processDtoList,jdbcType=OTHER},
            </if>
            <if test="migrateTime != null">
                MIGRATE_TIME = #{migrateTime,jdbcType=TIMESTAMP}
            </if>
        </set>
        WHERE ID = #{id,jdbcType=BIGINT} and VERSION = #{version,jdbcType=SMALLINT}
    </update>

    <!-- 多条件组合查询 -->
    <select id="listBy" parameterType="java.util.Map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="table"/>
        <where>
            <include refid="condition_sql"/>
        </where>
        <choose>
            <when test="sortColumns != null and sortColumns !='' ">
                <![CDATA[ ORDER BY ${sortColumns} ]]>
            </when>
            <otherwise>
                <![CDATA[ ORDER BY ID DESC ]]>
            </otherwise>
        </choose>
    </select>

    <!-- 根据多条件组合查询，计算总记录数 -->
    <select id="countBy" parameterType="java.util.Map" resultType="long">
        SELECT count(ID) FROM
        <include refid="table"/>
        <where>
            <include refid="condition_sql"/>
        </where>
    </select>

    <!-- 按查询条件删除 -->
    <delete id="deleteBy">
        DELETE FROM
        <include refid="table"/>
        <where>
            <include refid="condition_sql"/>
        </where>
    </delete>

    <!-- 根据多个id查询 -->
    <select id="listByIdList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="table"/>
        WHERE ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
    </select>

    <!-- 根据id查询 -->
    <select id="getById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="table"/>
        WHERE ID = #{id,jdbcType=BIGINT}
    </select>

    <!-- 按id主键删除 -->
    <delete id="deleteById">
        DELETE FROM
        <include refid="table"/>
        WHERE ID = #{id,jdbcType=BIGINT}
    </delete>

    <!-- 按多个id主键删除 -->
    <delete id="deleteByIdList" parameterType="list">
        DELETE FROM
        <include refid="table"/>
        WHERE ID IN
        <foreach collection="list" item="item" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
    </delete>

    <!-- ↑↑↑↑↑↑ 如果有新增字段、删除字段、修改字段 以上内容可用模板生成新内容后直接替换 ↑↑↑↑↑↑ -->
    <!-- ↓↓↓↓↓↓ 以下内容是根据需求手动添加或修改的，请勿使用模板内容直接覆盖 ↓↓↓↓↓↓ -->

    <sql id="condition_sql">
        <if test="id != null ">
            AND ID = #{id,jdbcType=BIGINT}
        </if>
        <if test="idList != null and idList.size() > 0">
            AND ID IN
            <foreach collection="idList" item="item" index="index" open="(" separator="," close=")">#{item,jdbcType=BIGINT}</foreach>
        </if>
        <if test="createTimeBegin != null">
            AND CREATE_TIME >= #{createTimeBegin,jdbcType=TIMESTAMP}
        </if>
        <if test="createTimeEnd != null ">
            AND CREATE_TIME <![CDATA[<=]]> #{createTimeEnd,jdbcType=TIMESTAMP}
        </if>
        <if test="accountProcessNo != null and accountProcessNo !='' ">
            AND ACCOUNT_PROCESS_NO = #{accountProcessNo,jdbcType=VARCHAR}
        </if>
        <if test="processResult != null ">
            AND PROCESS_RESULT = #{processResult,jdbcType=SMALLINT}
        </if>
        <if test="errorCode != null ">
            AND ERROR_CODE = #{errorCode,jdbcType=INTEGER}
        </if>
        <if test="auditStage != null ">
            AND AUDIT_STAGE = #{auditStage,jdbcType=TINYINT}
        </if>
        <if test="callbackStage != null ">
            AND CALLBACK_STAGE = #{callbackStage,jdbcType=TINYINT}
        </if>
        <if test="isFromAsync != null ">
            AND IS_FROM_ASYNC = #{isFromAsync,jdbcType=TINYINT}
        </if>
        <if test="trxNo != null and trxNo !=''">
            and JSON_SEARCH(JSON_EXTRACT(PROCESS_DTO_LIST, '$[*].trxNo'), 'all', #{trxNo}) IS NOT NULL
        </if>
        <if test="merchantNo != null and merchantNo !=''">
            and JSON_SEARCH(JSON_EXTRACT(PROCESS_DTO_LIST, '$[*].merchantNo'), 'all', #{merchantNo}) IS NOT NULL
        </if>
    </sql>
</mapper>

